export default "{\"documentCount\":29,\"nextId\":29,\"documentIds\":{\"0\":\"0\",\"1\":\"0#关于作者\",\"2\":\"0#问题\",\"3\":\"0#联系方式\",\"4\":\"0#网站信息\",\"5\":\"1\",\"6\":\"3\",\"7\":\"3#_1-c语言程序基本结构\",\"8\":\"3#printf-这是c语言中用于输出格式化信息的函数。\",\"9\":\"3#对于格式字符串-引号是必需的-因为格式字符串是一个字符串常量-而字符串常量在-c-语言中需要由双引号括起来。\",\"10\":\"3#_2-c语言输入的格式\",\"11\":\"3#c语言关键字\",\"12\":\"3#c-中的空格\",\"13\":\"3#_3-c语言数据类型\",\"14\":\"3#_4-c语言变量\",\"15\":\"3#变量的命名规则\",\"16\":\"3#c-中的变量声明\",\"17\":\"3#算术运算符\",\"18\":\"3#逻辑运算符\",\"19\":\"3@0\",\"20\":\"3@1\",\"21\":\"4\",\"22\":\"4@0\",\"23\":\"4@1\",\"24\":\"5\",\"25\":\"5@0\",\"26\":\"5@1\",\"27\":\"6\",\"28\":\"7\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,14],\"2\":[1,15],\"3\":[1,6],\"4\":[1,5],\"5\":[1,3],\"6\":[1,8],\"7\":[2,23],\"8\":[3,75],\"9\":[7,51],\"10\":[2,34],\"11\":[1,79],\"12\":[2,38],\"13\":[2,34],\"14\":[2,7],\"15\":[2,111],\"16\":[2,147],\"17\":[1,53],\"18\":[2,19],\"19\":[null,null,1],\"20\":[null,null,3],\"21\":[1,310],\"22\":[null,null,1],\"23\":[null,null,3],\"24\":[1,75],\"25\":[null,null,1],\"26\":[null,null,3],\"27\":[1,3],\"28\":[1]},\"averageFieldLength\":[1.7184557003794754,49.622337662337664,0.4641387419165196],\"storedFields\":{\"0\":{\"h\":\"作者介绍\"},\"1\":{\"h\":\"\",\"t\":[\"名称:小咕咚\",\"地方:老家在苏北小县城\",\"爱好:喜欢看动漫，动画，经常使用Bilibili, Telegram, Github。\",\"特长:喜欢学习做web，正在学习搭建网络代理，有些喜欢折腾网络\"]},\"2\":{\"h\":\"\",\"t\":[\"Q1：为什么会有自己的网站?\",\"A1：偶然间看见别的大佬都有自己的网站，自己也想尝试去做，内心很佩服Github上造轮子的大佬。对web前端和网络感兴趣，也想尝试去做点什么😭，但是我只能在B站上跟着视频学习去敲项目代码。\",\"Q2：喜欢做什么？\",\"A2：做自己喜欢的事情，做自己感兴趣的事情。\"]},\"3\":{\"h\":\"\",\"t\":[\"1.QQ号\",\"2.邮箱\",\"3.Telegram\"]},\"4\":{\"h\":\"\",\"t\":[\"网站是基于vuepress的vuepess-theme-hope主题,部署在Github pages和Vercel上\"]},\"5\":{\"h\":\"友情链接\",\"t\":[\"咕东的主页天若有情天亦老，人间正道是沧桑。\"]},\"6\":{\"h\":\"C语言基础类型\",\"t\":[\"复习会结合chatgpt,b站up主Micro_Frank的视频，菜鸟教程.遇到有疑问的代码，我会问问chatgdp.\",\"以后忘了C语言也会看看日记。\"]},\"7\":{\"h\":\"1.C语言程序基本结构\",\"t\":[\"#include <stdio.h> int main(void) { int age; printf(\\\"Please input your age: \\\\n\\\"); scanf_s(\\\"%d\\\", &age); if (age >= 18) { printf(\\\"成年!允许玩！ \\\\n\\\"); } return 0; }\"]},\"8\":{\"h\":\"printf: 这是C语言中用于输出格式化信息的函数。\",\"t\":[\"\\\"Please input your age: \\\\n\\\": 这是要输出的格式化字符串。在这里，它是一条提示信息，告诉用户需要输入年龄，并且\\\\n表示换行，使得用户输入的内容会显示在提示信息的下一行。 因此，运行这段代码时，程序会向用户输出 \\\"Please input your age:\\\"，然后等待用户输入年龄。这是一个简单的用户交互示例，用于获取用户的年龄信息。\",\"printf(\\\"a: %d\\\\n\\\", a);\",\"a: 是一个字符串常量， 它是字符 'a' 后面紧跟一个冒号和一个空格组成的字符串。 %d 是格式说明符，它告诉 printf 函数，在这个位置要插入一个整数值。 a 是一个整数变量，它的值将替换 %d 的位置。 \\\\n 是一个换行符，它使得输出的内容会换到下一行。 所以，a 在这里既是变量，也是整数值的提供者。整个语句的效果是将字符串 \\\"a: \\\" 和变量 a 的值以指定的格式输出到屏幕上。这种方式在输出中提供了一些上下文信息，使得输出更加易读和有意义。 字符串常量 \\\"a: \\\" 是一个完整的字符串，它包含了字符 'a'、冒号 : 和空格，这是为了提供输出的上下文信息。设计者可能认为在这里添加额外的 'a' 不是必要的，因为 'a' 已经在变量名 a 中表示了。\",\"分号 ; 在 C 程序中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。分号不写，调试必报错，Java也是这样，没有分号就不是一个完整的语句，有些人刚学代码就容易忘加分号，尤其是后面要写成百上千行代码。\",\"引号\\\"\\\" 例如，下面是两个不同的输出语句： // 冒号在字符串内 printf(\\\"Please input your age: \\\\n\\\");\",\"// 冒号在字符串外 printf(\\\"Please input your age:\\\"); printf(\\\"\\\\n\\\");\",\"为啥一定要引号，忘记引号，生成解决方案会报错，\"]},\"9\":{\"h\":\"对于格式字符串，引号是必需的，因为格式字符串是一个字符串常量，而字符串常量在 C 语言中需要由双引号括起来。\",\"t\":[\"printf(\\\"Hello, %s! Your age is %d.\\\\n\\\", \\\"guyindong\\\", 20);\",\"\\\"Hello, %s! Your age is %d.\\\\n\\\" 是格式化字符串。其中，%s 和 %d 是格式说明符，表示在字符串中要插入字符串和整数的位置。而\\\"guyindong\\\" 是一个普通的字符串常量，它不是格式化字符串，它只是一个作为 printf 函数参数的常规字符串。\",\"格式化字符串包含格式说明符，用于指定在运行时插入数据的位置和类型，而普通字符串常量只是字符序列。\",\"在 C 语言中，字符串是由字符组成的字符数组，而字符串常量是这样的字符数组的一种表示方式。字符串常量是一种特殊的常量，表示一系列字符的序列，围绕在双引号中。\",\"这是因为在C语言中，引号是用于定义字符串常量的语法规则。双引号告诉编译器这是一个字符串，而不是一个变量名或其他什么.\",\"例如\",\"char name[] = \\\"guyindong\\\";\",\"\\\"guyindong\\\" 是一个字符串常量，它是一个字符数组的初始化值，而这个数组用于存储名字 \\\"guyindong\\\" 的字符序列。由于这是字符串常量，所以它必须用双引号括起来。双引号是C语言中用于表示字符串常量的规定方式，是为了在源代码中明确区分字符串常量和其他元素（比如变量名、关键字等）。这种规定有助于编译器正确地解释和处理源代码。\"]},\"10\":{\"h\":\"2.C语言输入的格式\",\"t\":[\"scanf_s(\\\"%d\\\", &age);\",\"这行代码： scanf_s：这是 C 语言中的一个输入函数，其中的 _s 表示安全版本。scanf_s 是 scanf 的安全版本，为了提高程序的安全性，特别是防范缓冲区溢出的风险。 \\\"%d\\\"：这是格式说明符，告诉 scanf_s 如何解释输入。在这里，%d 用于读取整数。%d 告诉 scanf_s 期望输入一个整数，并将输入的字符解释为整数。 &age：&（取地址）运算符用于获取变量 age 的内存地址。scanf_s 需要知道它可以将读取到的值存储在哪里，因此 &age 提供了存储用户输入整数的地址。 综合起来，scanf_s(\\\"%d\\\", &age); 表示程序将等待用户输入一个整数，一旦用户输入了整数，它将被存储在变量 age 中，以便在程序中进一步使用。\"]},\"11\":{\"h\":\"C语言关键字\",\"t\":[\" 关键字 说明 auto 声明自动变量 break 跳出当前循环 case 开关语句分支 char 声明字符型变量或函数返回值类型 const 定义常量，如果一个变量被 const 修饰，那么它的值就不能再被改变 continue 结束当前循环，开始下一轮循环 default 开关语句中的\\\"其它\\\"分支 do 循环语句的循环体 double 声明双精度浮点型变量或函数返回值类型 else 条件语句否定分支（与 if 连用） enum 声明枚举类型 extern 声明变量或函数是在其它文件或本文件的其他位置定义 float 声明浮点型变量或函数返回值类型 for 一种循环语句 goto 无条件跳转语句 if 条件语句 int 声明整型变量或函数 long 声明长整型变量或函数返回值类型 register 声明寄存器变量 return 子程序返回语句（可以带参数，也可不带参数） short 声明短整型变量或函数 signed 声明有符号类型变量或函数 sizeof 计算数据类型或变量长度（即所占字节数） static 声明静态变量 struct 声明结构体类型 switch 用于开关语句 typedef 用以给数据类型取别名 unsigned 声明无符号类型变量或函数 union 声明共用体类型 void 声明函数无返回值或无参数，声明无类型指针 volatile 说明变量在程序执行中可被隐含地改变 while 循环语句的循环条件\"]},\"12\":{\"h\":\"C 中的空格\",\"t\":[\"只包含空格的行，被称为空白行，可能带有注释，C 编译器会完全忽略它。 在 C 中，空格用于描述空白符、制表符、换行符和注释。空格分隔语句的各个部分，让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。因此，在下面的语句中： int age; 在这里，int 和 age 之间必须至少有一个空格字符（通常是一个空白符），这样编译器才能够区分它们。另一方面，在下面的语句中：\",\"fruit = apples + oranges; // 获取水果的总数 fruit 和 =，或者 = 和 apples 之间的空格字符不是必需的，但是为了增强可读性，您可以根据需要适当增加一些空格。我觉得代码还是都加空格，毕竟人家的代码都有空格。\"]},\"13\":{\"h\":\"3.C语言数据类型\",\"t\":[\"在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。 C 中的类型可分为以下几种： 类型与描述 1.基本数据类型：它们是算术类型，包括整型（int）、字符型（char）、浮点型（float）和双精度浮点型（double）。\",\"2.枚举类型：它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。\",\"3.void 类型：类型说明符 void 表示没有值的数据类型，通常用于函数返回值。\",\"4.派生类型：包括数组类型、指针类型和结构体类型。\"]},\"14\":{\"h\":\"4.C语言变量\",\"t\":[\"变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。\"]},\"15\":{\"h\":\"变量的命名规则：\",\"t\":[\"变量名可以包含字母、数字和下划线 _。 变量名必须以字母或下划线开头。 大小写敏感，即大写字母和小写字母被视为不同字符。 举个例子 _1可以是变量名C 中的变量定义 变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：\",\"type variable_list; type 表示变量的数据类型，可以是整型、浮点型、字符型、指针等，也可以是用户自定义的对象。\",\"variable_list 可以由一个或多个变量的名称组成，多个变量之间用逗号,分隔，变量由字母、数字和下划线组成，且以字母或下划线开头。\",\"下面列出几个有效的声明：\",\"定义整型变量：\",\"int age; 以上代码中，age 被定义为一个整型变量。\",\"定义浮点型变量：\",\"float salary; 以上代码中，salary 被定义为一个浮点型变量。\",\"定义字符型变量：\",\"char grade; 以上代码中，grade 被定义为一个字符型变量。\",\"定义指针变量：\",\"int *ptr; 以上代码中，ptr 被定义为一个整型指针变量。\",\"定义多个变量： int i, j, k;\",\"int i, j, k; 声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。\",\"变量初始化 在 C 语言中，变量的初始化是在定义变量的同时为其赋予一个初始值。变量的初始化可以在定义时进行，也可以在后续的代码中进行。\",\"初始化器由一个等号，后跟一个常量表达式组成，如下所示：\",\"type variable_name = value; 其中，type 表示变量的数据类型，variable_name 是变量的名称，value 是变量的初始值。比如整形int，后面跟变量名，再进行赋值。\",\"下面列举几个实例：\",\"int x = 10; // 整型变量 x 初始化为 10 float pi = 3.14; // 浮点型变量 pi 初始化为 3.14 char ch = 'A'; // 字符型变量 ch 初始化为字符 'A' extern int d = 3, f = 5; // d 和 f 的声明与初始化 int d = 3, f = 5; // 定义并初始化 d 和 f byte z = 22; // 定义并初始化 z\",\"后续初始化变量：\",\"在变量定义后的代码中，可以使用赋值运算符 = 为变量赋予一个新的值。\",\"type variable_name; // 变量定义 variable_name = new_value; // 变量初始化\",\"举例:\",\"int x; // 整型变量x定义 x = 20; // 变量x初始化为20 float pi; // 浮点型变量pi定义 pi = 3.14159; // 变量pi初始化为3.14159 char ch; // 字符型变量ch定义 ch = 'B'; // 变量ch初始化为字符'B'\"]},\"16\":{\"h\":\"C 中的变量声明\",\"t\":[\"变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。\",\"变量的声明有两种情况：\",\"1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。 2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。 除非有extern关键字，否则都是变量的定义。\",\"extern int i; //声明，不是定义 int i; //声明，也是定义\",\"举个简单例子吧: 变量在头部就已经被声明，但是定义与初始化在addtwonum()函数内.\",\"#include <stdio.h> // 函数外定义变量 x 和 y int x; int y; int addtwonum() { // 函数内声明变量 x 和 y 为外部变量 extern int x; extern int y; // 给外部变量（全局变量）x 和 y 赋值 x = 1; y = 2; return x+y; } int main() { int result; // 调用函数 addtwonum result = addtwonum(); printf(\\\"result 为: %d\\\",result); return 0; }\",\"这种用法通常不太推荐，因为这样的代码结构可能会导致代码的可读性和维护性下降。最好的做法是在变量的声明和定义时就进行初始化，而不是在函数内部进行。\",\"最好的做法是在变量的声明和定义时进行初始化。在C语言中，可以在声明变量的同时进行初始化。 （gpt原话）\",\"#include <stdio.h> // 在声明时进行初始化 int x = 1; int y = 2; int addtwonum() { // 直接使用全局变量 x 和 y return x + y; } int main() { int result; // 调用函数 addtwonum result = addtwonum(); printf(\\\"result 为: %d\\\", result); return 0; }\",\"在这个例子中，全局变量 x 和 y 在声明的同时被初始化为 1 和 2。这样，不需要在函数内部进行额外的初始化步骤，而是可以直接在函数中使用这两个已经初始化的全局变量。这提高了代码的可读性和维护性，并避免了在函数内部进行额外的初始化步骤。\",\"程序可以分成多个代码文件:\",\"addtwonum.c\",\"#include <stdio.h> /*外部变量声明*/ extern int x ; extern int y ; int addtwonum() { return x + y; }\",\"这个文件主要包含了一个函数 addtwonum 的定义。该函数通过使用外部变量 x 和 y 的值计算它们的和，并返回结果。注意，这里只是函数的定义，而实际的变量声明在其他文件中。\",\"test.c\",\"#include <stdio.h> /*定义两个全局变量*/ int x = 1; int y = 2; int addtwonum(); int main(void) { int result; result = addtwonum(); printf(\\\"result 为: %d\\\\n\\\", result); return 0; }\",\"这个文件包含了两个全局变量 x 和 y 的定义，它们在此文件中分别被赋值为 1 和 2。然后，通过调用 addtwonum 函数，获取并打印这两个变量的和。需要注意的是，函数 addtwonum 的声明是通过 extern 关键字进行的，表明它是在其他文件中定义的。\",\"当这两个文件一起编译和链接时，程序会通过 main 函数计算并输出变量 x 和 y 的和。\",\"下面这一段讲main 函数的是复制chatgdp3.5的原话;\",\"在C语言中，每个程序只能有一个 main 函数，它是程序的入口点。但你可以通过使用函数来模块化你的代码，然后在 main 函数中调用这些函数，以达到类似于多个入口点的效果。此外，你可以使用命令行参数来决定在运行时执行哪一部分代码。\",\"以下是一个简单的C语言示例：\",\"#include <stdio.h> #include <stdlib.h> void main_function_1() { printf(\\\"Main function 1\\\\n\\\"); } void main_function_2() { printf(\\\"Main function 2\\\\n\\\"); } int main(int argc, char *argv[]) { if (argc > 1) { int choice = atoi(argv[1]); switch (choice) { case 1: main_function_1(); break; case 2: main_function_2(); break; default: printf(\\\"Invalid argument\\\\n\\\"); break; } } else { printf(\\\"Usage: %s [1|2]\\\\n\\\", argv[0]); } return 0; }\",\"在这个例子中，通过在命令行中提供参数，你可以选择在运行时执行 main_function_1 或 main_function_2。\",\"./my_program 1\",\"./my_program 2\",\"这将决定在 main 函数中调用哪个功能函数。请注意，此示例中的错误处理较为简单，实际项目中可能需要更复杂的错误检查和处理机制。\",\"运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C语言中以下类型的运算符：\",\"算术运算符 关系运算符 逻辑运算符 位运算符 赋值运算符 杂项运算符\"]},\"17\":{\"h\":\"算术运算符\",\"t\":[\"加减乘除\",\"#include <stdio.h> int main() { int a = 21; int b = 10; int c ; c = a + b; printf(\\\"Line 1 - c 的值是 %d\\\\n\\\", c ); c = a - b; printf(\\\"Line 2 - c 的值是 %d\\\\n\\\", c ); c = a * b; printf(\\\"Line 3 - c 的值是 %d\\\\n\\\", c ); c = a / b; printf(\\\"Line 4 - c 的值是 %d\\\\n\\\", c ); c = a % b; printf(\\\"Line 5 - c 的值是 %d\\\\n\\\", c ); c = a++; // 赋值后再加 1 ，c 为 21，a 为 22 printf(\\\"Line 6 - c 的值是 %d\\\\n\\\", c ); c = a--; // 赋值后再减 1 ，c 为 22 ，a 为 21 printf(\\\"Line 7 - c 的值是 %d\\\\n\\\", c ); }\",\"i++:\",\"后增量：这意味着当前的i值在表达式中被使用，然后i被递增。 表达式i++的值是当前的i值，然后i增加1。 示例：\",\"int i = 5; int result = i++; // result是5，i现在是6\",\"++i:\",\"前增量：这意味着i首先被递增，然后更新后的值在表达式中被使用。 表达式++i的值是i的递增后的值。 示例：\",\"int i = 5; int result = ++i; // result是6，i现在是6\",\"i ++ 一开始前面结果不变，i值增加1。++ i 开始结果和i都增加1.\",\"关系运算符：\"]},\"18\":{\"h\":\"逻辑运算符:\",\"t\":[\"运算符 描述 实例\",\"&& 称为逻辑与运算符。 如果两个操作数都非零，则条件为真。 (A && B) 为假。\",\"|| 称为逻辑或运算符。 如果两个操作数中有任意一个非零，则条件为真。 (A || B) 为真。\",\"! 称为逻辑非运算符。 用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。 !(A && B) 为真。\",\"位运算符\",\"赋值运算符\",\"杂项运算符\"]},\"19\":{\"c\":[\"C语言\"]},\"20\":{\"c\":[\"Windows\",\"Visual studio\"]},\"21\":{\"h\":\"C语言判断与循环\",\"t\":[\"判断语句 C 语言提供了以下类型的判断语句。点击链接查看每个语句的细节。\",\"语句 描述 if 语句 一个 if 语句 由一个布尔表达式后跟一个或多个语句组成。 if...else 语句 一个 if 语句 后可跟一个可选的 else 语句，else 语句在布尔表达式为假时执行。 嵌套 if 语句 可以在一个 if 或 else if 语句内使用另一个 if 或 else if 语句。 switch 语句 一个 switch 语句允许测试一个变量等于多个值时的情况。 嵌套 switch 语句 可以在一个 switch 语句内使用另一个 switch 语句。\",\"if else 语句\",\"if(boolean_expression) { / 如果布尔表达式为真将执行的语句 / } else { / 如果布尔表达式为假将执行的语句 / }\",\"#include <stdio.h> int main() { int age; int english_score; int IQ; printf (\\\"Please input your age: \\\\n\\\"); scanf_s(\\\"%d\\\", &age); printf (\\\"Please input your english_score: \\\\n\\\"); scanf_s(\\\"%d\\\", &english_score); printf (\\\"Please input your IQ: \\\\n\\\"); scanf_s(\\\"%d\\\", &IQ); if ((age >= 18) && (english_score >= 90 || IQ >= 120)){ //程序可读性 printf (\\\"成年！允许玩！ \\\\n\\\"); } else { printf (\\\"不成年 或者你的英语成绩不合格! \\\\n\\\"); //程序可读性 } return 0; }\",\"上面代码中if 中语句是条件，age要大于等于18，后面英语分数和IQ满足一项就可以执行 \\\"成年! 允许玩\\\"，否则执行else 后的语句。\",\"if 可以嵌套使用，但不建议又过多的if\",\"include <stdio.h> int main(void) { int age = 21; if (age < 18){ printf (\\\"你未成年！\\\\n\\\"); } if (age >= 70){ printf (\\\"老年\\\\n\\\"); return 0; } if (age >=50) { printf (\\\"中年\\\\n\\\"); return 0; } if (age >= 20){ printf (\\\"angthing\\\\n\\\"); return 0; } return 0; }\",\"else if 可以理解为要不然\",\"include <stdio.h> int main() { int age == 20; if (age == 18){ printf (\\\"满足成年了！\\\\n\\\"); //要不然的话 } else if (age == 30) { printf (\\\"满足结婚年龄!\\\\n\\\"); } else if (age == 70) { printf (\\\"满足养老年龄！\\\\n\\\"); } else if (age == 100) { printf (\\\"高寿\\\\n\\\"); } else { printf (\\\"快去睡觉！\\\\n\\\"); } return 0; }\",\"switch语句可以嵌套使用\",\"#include <stdio.h> int main() { int day; printf(\\\"请输入一个数字（1-7）：\\\"); scanf(\\\"%d\\\", &day); switch (day) { case 1: printf(\\\"星期一\\\\n\\\"); break; case 2: printf(\\\"星期二\\\\n\\\"); break; case 3: printf(\\\"星期三\\\\n\\\"); break; case 4: printf(\\\"星期四\\\\n\\\"); break; case 5: printf(\\\"星期五\\\\n\\\"); break; case 6: printf(\\\"星期六\\\\n\\\"); break; case 7: printf(\\\"星期日\\\\n\\\"); break; default: printf(\\\"无效的输入\\\\n\\\"); break; } return 0; }\",\"C语言循环基础 首先用的最多是for循环\",\"for ( init; condition; increment ) { statement(s); }\",\"for 循环是一种在编程中经常使用的迭代结构，用于重复执行一组语句，直到指定的条件不再满足。for 循环的基本语法如下：\",\"for (初始化表达式; 循环条件; 迭代表达式) { 循环体语句; }\",\"1.初始化表达式 (init)：在循环开始之前执行一次。通常用于初始化循环控制变量。这一部分可以包含声明和赋值操作。\",\"2.循环条件 (condition)：在每次循环迭代之前检查的条件。如果条件为真（true），循环将继续执行；如果条件为假（false），循环将终止。\",\"3.迭代表达式 (increment)：在每次循环迭代之后执行。通常用于更新循环控制变量的值。\",\"4.循环体语句 (statement(s))：在每次循环迭代时执行的一组语句。这是循环的主体，包含了实际的操作。\",\"我会举个简单的例子，利用for循环计算1到5的和\",\"#include <stdio.h> int main() { int sum = 0; // 使用 for 循环计算 1 到 5 的和 for (int i = 1; i <= 5; i++) { sum += i;// 循环体语句 } // 输出结果 printf(\\\"Sum: %d\\\\n\\\", sum); return 0; }\",\"1.首先就是初始化表达式 int i = 1; 在循环开始前初始化循环控制变量 i，i就是1。 2.循环条件 i <= 5 在每次循环迭代前检查 i 是否小于等于 5。 3.迭代表达式 i++ 在每次循环迭代后将 i 的值增加 1。 4.循环体语句 sum += i; 在每次循环迭代时将当前的 i 加到 sum 中。\",\"sum += i就是 sum = sum + i 循环开始时，sum 的初始值为 0，然后在每次循环中，当前的 i 的值都会加到 sum 上，最终得到 1 到 5 的和。 第一次循环：sum = 0 + 1，sum 的值为 1。 第二次循环：sum = 1 + 2，sum 的值为 3。 第三次循环：sum = 3 + 3，sum 的值为 6。 第四次循环：sum = 6 + 4，sum 的值为 10。 第五次循环：sum = 10 + 5，sum 的值为 15。\",\"i++（后缀递增）： 先使用当前值，然后再递增。 返回 i 的原始值，然后将 i 增加 1。\",\"int i = 5; int result = i++; // result = 5, i = 6\",\"++i（前缀递增）：\",\"先递增，然后再使用新值。 返回 i 增加 1 后的值。\",\"在C语言中，for 循环的循环体可以是一个单独的语句，也就是说，你可以在没有大括号的情况下编写 for 循环。如果 for 循环只有一条语句，大括号是可选的 。在你的代码中，你的 for 循环只有一条语句，因此去掉大括号是合法的。以下是你的代码的修正版：\",\"#include <stdio.h> int main() { /* for 循环执行 */ for (int a = 10; a < 20; a = a + 1) { printf(\\\"a 的值： %d\\\\n\\\", a); } return 0; }\",\"第一次直接输出10，第二次执行迭代表达式，a 的值: 11 换行继续输出，最后是19\",\"求1到100中所有偶数的和\",\"#include <stdio.h> int main() { // 初始化偶数和为0 int even_sum = 0; // 使用for循环遍历0到100的偶数 for (int num = 0; num <= 100; num += 2) //num = num + 2 { even_sum += num; //even_sum = even_sum + num } // 打印结果 printf(\\\"0到100的偶数和为: %d\\\\n\\\", even_sum); return 0; }\",\"在上述的C程序中，初始时 even_sum 被初始化为0，而 num 被设置为0。在第一次循环迭代中，num 的值是0，因此 even_sum 将增加0，即 even_sum 的值仍然是0（even_sum = even_sum + num）。所以，第一次循环迭代后，even_sum 的值仍然是0。第二次循环结果是2.\",\"在第二次循环迭代中，num 的值已经被自增为2。循环条件 num <= 100 仍然满足，因此循环继续执行。在第二次迭代中，even_sum += num; 将 even_sum 加上 num（此时 num 的值为2），并且 num += 2; 将 num 自增为4。所以，第二次循环迭代后，even_sum 的值是2，而 num 的值变为4。\",\"这个过程会一直重复，每次迭代都会将 num 的当前值加到 even_sum 中，然后将 num 增加2。最终，当 num 的值超过100时，循环终止。在循环结束时，even_sum 包含了0到100之间所有偶数的总和。\",\"第一步执行rush = 1;就是初始化表达式，第二步执行循环条件，看rush 是否小于1000 ，第三步执行循环体语句，rush = 1. 第四步执行自加语句rush ++，此时rush 是2。 第五步执行循环条件，rush <= GOLD;即rush <= 1000，第六步执行自增语句，rush变成了3，第七步执行循环体语句，输出 rush = 7;\",\"以下是一个简单的C语言程序，用于生成斐波那契数列的前n个数字：\",\"#include <stdio.h> void generateFibonacci(int n) { int first = 0, second = 1, next, i; printf(\\\"斐波那契数列前 %d 个数字：\\\\n\\\", n); for (i = 0; i < n; i++) { printf(\\\"%d, \\\", first); next = first + second; first = second; second = next; } } int main() { int n; printf(\\\"请输入要生成的斐波那契数列的数字个数：\\\"); scanf(\\\"%d\\\", &n); generateFibonacci(n); return 0; }\",\"for 循环可以嵌套使用下面用C语言输出九九乘法表\",\"#include <stdio.h> int main() { int row, column; for (row = 1; row <= 9; row++) { for (column = 1; column <= 9; column++) { printf(\\\"%d*%d = %2d\\\\t\\\", row, column, row * column); } printf(\\\"\\\\n\\\"); } return 0; }\",\"外层循环 (for (row = 1; row <= 9; row++)): 控制行数，从1到9。\",\"内层循环 (for (column = 1; column <= 9; column++)): 控制每行中的列数，同样从1到9 。\",\"在内层循环中，printf语句输出了每一项的乘法表达式，其中%d*%d = %2d\\\\t 是格式控制字符串，它表示输出两个整数相乘的结果，其中 %d 是用来格式化整数的占位符，%2d 表示至少输出两个字符的整数，\\\\t 是制表符（用于在输出中产生水平制表）。\",\"代码里printf(\\\"%d*%d = %2d\\\\t\\\", row, column, row* column); 语句用于输出九九乘法表中每一项的表达式。这样的格式化输出有助于让输出结果整齐对齐，提高可读性。例如，如果乘积是个位数，%2d 会在前面补一个空格，确保每一项的输出都占用两个字符的宽度。\\\\t 是制表符（用于在输出中产生水平制表）。\",\"调试：\"]},\"22\":{\"c\":[\"C语言\"]},\"23\":{\"c\":[\"Windows\",\"Visual studio\"]},\"24\":{\"h\":\"C语言数组与指针\",\"t\":[\"C 语言支持数组数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。\",\"数组的声明并不是声明一个个单独的变量，比如 runoob0、runoob1、...、runoob99，而是声明一个数组变量，比如 runoob，然后使用 runoob[0]、runoob[1]、...、runoob[99] 来代表一个个单独的变量。\",\"所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。\",\"数组中的特定元素可以通过索引访问，第一个索引值为 0。\",\"C 语言还允许我们使用指针来处理数组，这使得对数组的操作更加灵活和高效。\",\"直接代码举例，B站视频代码\",\"#include <stdio.h> int main() { // 第一个下标（号） // 第一个0开始，0代码第一个元素，那么第二个下标就是2-1=1，第三个下标：3-1，第四个4-1，第五个5-1 // 数组类型 数组名称[数组长度] unsigned plants[5] = { 100, 50, 150, 80, 25 }; // 数组的元素下标从0开始，规律，下标 = N-1 N代表第几个元素 printf(\\\"plant --- %u\\\\n\\\", plants[1]); //下标是1，输出第二个元素 // 遍历 数组 for (int i = 0; i < 5; i++) { printf(\\\"plant --- %u\\\\n\\\", plants[i]); } return 0; }\",\"在我本地visual studio 调试运行\",\"二维数组的比喻\"]},\"25\":{\"c\":[\"C语言\"]},\"26\":{\"c\":[\"Windows\",\"Visual studio\"]},\"27\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"28\":{\"h\":\"文章\"}},\"dirtCount\":0,\"index\":[[\"文章\",{\"0\":{\"28\":1}}],[\"二维数组的比喻\",{\"1\":{\"24\":1}}],[\"遍历\",{\"1\":{\"24\":1}}],[\"规律\",{\"1\":{\"24\":1}}],[\"80\",{\"1\":{\"24\":1}}],[\"那么第二个下标就是2\",{\"1\":{\"24\":1}}],[\"那么它的值就不能再被改变\",{\"1\":{\"11\":1}}],[\"号\",{\"1\":{\"24\":1}}],[\"所有的数组都是由连续的内存位置组成\",{\"1\":{\"24\":1}}],[\"所以它必须用双引号括起来\",{\"1\":{\"9\":1}}],[\"所以\",{\"1\":{\"8\":1,\"21\":2}}],[\"来代表一个个单独的变量\",{\"1\":{\"24\":1}}],[\"确保每一项的输出都占用两个字符的宽度\",{\"1\":{\"21\":1}}],[\"会在前面补一个空格\",{\"1\":{\"21\":1}}],[\"提高可读性\",{\"1\":{\"21\":1}}],[\"提供了存储用户输入整数的地址\",{\"1\":{\"10\":1}}],[\"代码里printf\",{\"1\":{\"21\":1}}],[\"同样从1到9\",{\"1\":{\"21\":1}}],[\"控制每行中的列数\",{\"1\":{\"21\":1}}],[\"控制行数\",{\"1\":{\"21\":1}}],[\"内层循环\",{\"1\":{\"21\":1}}],[\"内心很佩服github上造轮子的大佬\",{\"1\":{\"2\":1}}],[\"从1到9\",{\"1\":{\"21\":1}}],[\"外层循环\",{\"1\":{\"21\":1}}],[\"外部变量声明\",{\"1\":{\"16\":1}}],[\"99\",{\"1\":{\"24\":1}}],[\"9\",{\"1\":{\"21\":4}}],[\"90\",{\"1\":{\"21\":1}}],[\"个数字\",{\"1\":{\"21\":1}}],[\"斐波那契数列前\",{\"1\":{\"21\":1}}],[\"输出第二个元素\",{\"1\":{\"24\":1}}],[\"输出\",{\"1\":{\"21\":1}}],[\"输出结果\",{\"1\":{\"21\":1}}],[\"runoob\",{\"1\":{\"24\":4}}],[\"runoob99\",{\"1\":{\"24\":1}}],[\"runoob1\",{\"1\":{\"24\":1}}],[\"runoob0\",{\"1\":{\"24\":1}}],[\"rush变成了3\",{\"1\":{\"21\":1}}],[\"rush\",{\"1\":{\"21\":3}}],[\"row++\",{\"1\":{\"21\":2}}],[\"row\",{\"1\":{\"21\":9}}],[\"result是6\",{\"1\":{\"17\":1}}],[\"result是5\",{\"1\":{\"17\":1}}],[\"result\",{\"1\":{\"16\":12,\"17\":2,\"21\":2}}],[\"register\",{\"1\":{\"11\":1}}],[\"return\",{\"1\":{\"7\":1,\"11\":1,\"16\":7,\"21\":12,\"24\":1}}],[\"看rush\",{\"1\":{\"21\":1}}],[\"就是初始化表达式\",{\"1\":{\"21\":1}}],[\"每次迭代都会将\",{\"1\":{\"21\":1}}],[\"每个程序只能有一个\",{\"1\":{\"16\":1}}],[\"每个语句必须以分号结束\",{\"1\":{\"8\":1}}],[\"自增为4\",{\"1\":{\"21\":1}}],[\"自己也想尝试去做\",{\"1\":{\"2\":1}}],[\"将\",{\"1\":{\"21\":2}}],[\"将增加0\",{\"1\":{\"21\":1}}],[\"仍然满足\",{\"1\":{\"21\":1}}],[\"初始时\",{\"1\":{\"21\":1}}],[\"初始化偶数和为0\",{\"1\":{\"21\":1}}],[\"初始化表达式\",{\"1\":{\"21\":2}}],[\"初始化为字符\",{\"1\":{\"15\":1}}],[\"初始化为\",{\"1\":{\"15\":2}}],[\"初始化器由一个等号\",{\"1\":{\"15\":1}}],[\"打印结果\",{\"1\":{\"21\":1}}],[\"求1到100中所有偶数的和\",{\"1\":{\"21\":1}}],[\"换行继续输出\",{\"1\":{\"21\":1}}],[\"换行符和注释\",{\"1\":{\"12\":1}}],[\"大括号是可选的\",{\"1\":{\"21\":1}}],[\"大小写敏感\",{\"1\":{\"15\":1}}],[\"先递增\",{\"1\":{\"21\":1}}],[\"先使用当前值\",{\"1\":{\"21\":1}}],[\"前缀递增\",{\"1\":{\"21\":1}}],[\"前增量\",{\"1\":{\"17\":1}}],[\"增加2\",{\"1\":{\"21\":1}}],[\"增加\",{\"1\":{\"21\":2}}],[\"返回\",{\"1\":{\"21\":2}}],[\"第七步执行循环体语句\",{\"1\":{\"21\":1}}],[\"第六步执行自增语句\",{\"1\":{\"21\":1}}],[\"第五个5\",{\"1\":{\"24\":1}}],[\"第五步执行循环条件\",{\"1\":{\"21\":1}}],[\"第五次循环\",{\"1\":{\"21\":1}}],[\"第四个4\",{\"1\":{\"24\":1}}],[\"第四步执行自加语句rush\",{\"1\":{\"21\":1}}],[\"第四次循环\",{\"1\":{\"21\":1}}],[\"第三个下标\",{\"1\":{\"24\":1}}],[\"第三步执行循环体语句\",{\"1\":{\"21\":1}}],[\"第三次循环\",{\"1\":{\"21\":1}}],[\"第二步执行循环条件\",{\"1\":{\"21\":1}}],[\"第二次执行迭代表达式\",{\"1\":{\"21\":1}}],[\"第二次循环迭代后\",{\"1\":{\"21\":1}}],[\"第二次循环结果是2\",{\"1\":{\"21\":1}}],[\"第二次循环\",{\"1\":{\"21\":1}}],[\"第一个0开始\",{\"1\":{\"24\":1}}],[\"第一个下标\",{\"1\":{\"24\":1}}],[\"第一个索引值为\",{\"1\":{\"24\":1}}],[\"第一步执行rush\",{\"1\":{\"21\":1}}],[\"第一次直接输出10\",{\"1\":{\"21\":1}}],[\"第一次循环迭代后\",{\"1\":{\"21\":1}}],[\"第一次循环\",{\"1\":{\"21\":1}}],[\"最高的地址对应最后一个元素\",{\"1\":{\"24\":1}}],[\"最低的地址对应第一个元素\",{\"1\":{\"24\":1}}],[\"最终\",{\"1\":{\"21\":1}}],[\"最终得到\",{\"1\":{\"21\":1}}],[\"最后是19\",{\"1\":{\"21\":1}}],[\"最好的做法是在变量的声明和定义时进行初始化\",{\"1\":{\"16\":1}}],[\"最好的做法是在变量的声明和定义时就进行初始化\",{\"1\":{\"16\":1}}],[\"上\",{\"1\":{\"21\":1}}],[\"上面代码中if\",{\"1\":{\"21\":1}}],[\"当\",{\"1\":{\"21\":1}}],[\"当前的\",{\"1\":{\"21\":1}}],[\"当这两个文件一起编译和链接时\",{\"1\":{\"16\":1}}],[\"加上\",{\"1\":{\"21\":1}}],[\"加到\",{\"1\":{\"21\":1}}],[\"加减乘除\",{\"1\":{\"17\":1}}],[\"首先就是初始化表达式\",{\"1\":{\"21\":1}}],[\"首先用的最多是for循环\",{\"1\":{\"21\":1}}],[\"到\",{\"1\":{\"21\":2}}],[\"使用for循环遍历0到100的偶数\",{\"1\":{\"21\":1}}],[\"使用\",{\"1\":{\"21\":1}}],[\"使得输出更加易读和有意义\",{\"1\":{\"8\":1}}],[\"使得用户输入的内容会显示在提示信息的下一行\",{\"1\":{\"8\":1}}],[\"利用for循环计算1到5的和\",{\"1\":{\"21\":1}}],[\"包含了0到100之间所有偶数的总和\",{\"1\":{\"21\":1}}],[\"包含了实际的操作\",{\"1\":{\"21\":1}}],[\"包括数组类型\",{\"1\":{\"13\":1}}],[\"包括整型\",{\"1\":{\"13\":1}}],[\"迭代表达式\",{\"1\":{\"21\":3}}],[\"直接代码举例\",{\"1\":{\"24\":1}}],[\"直接使用全局变量\",{\"1\":{\"16\":1}}],[\"直到指定的条件不再满足\",{\"1\":{\"21\":1}}],[\"循环可以嵌套使用下面用c语言输出九九乘法表\",{\"1\":{\"21\":1}}],[\"循环终止\",{\"1\":{\"21\":1}}],[\"循环执行\",{\"1\":{\"21\":1}}],[\"循环只有一条语句\",{\"1\":{\"21\":2}}],[\"循环\",{\"1\":{\"21\":1}}],[\"循环的循环体可以是一个单独的语句\",{\"1\":{\"21\":1}}],[\"循环的基本语法如下\",{\"1\":{\"21\":1}}],[\"循环开始时\",{\"1\":{\"21\":1}}],[\"循环计算\",{\"1\":{\"21\":1}}],[\"循环将终止\",{\"1\":{\"21\":1}}],[\"循环将继续执行\",{\"1\":{\"21\":1}}],[\"循环体语句\",{\"1\":{\"21\":4}}],[\"循环条件\",{\"1\":{\"21\":4}}],[\"循环是一种在编程中经常使用的迭代结构\",{\"1\":{\"21\":1}}],[\"循环语句的循环条件\",{\"1\":{\"11\":1}}],[\"循环语句的循环体\",{\"1\":{\"11\":1}}],[\"无效的输入\",{\"1\":{\"21\":1}}],[\"无条件跳转语句\",{\"1\":{\"11\":1}}],[\"星期日\",{\"1\":{\"21\":1}}],[\"星期六\",{\"1\":{\"21\":1}}],[\"星期五\",{\"1\":{\"21\":1}}],[\"星期四\",{\"1\":{\"21\":1}}],[\"星期三\",{\"1\":{\"21\":1}}],[\"星期二\",{\"1\":{\"21\":1}}],[\"星期一\",{\"1\":{\"21\":1}}],[\"请输入要生成的斐波那契数列的数字个数\",{\"1\":{\"21\":1}}],[\"请输入一个数字\",{\"1\":{\"21\":1}}],[\"请注意\",{\"1\":{\"16\":1}}],[\"快去睡觉\",{\"1\":{\"21\":1}}],[\"高寿\",{\"1\":{\"21\":1}}],[\"满足养老年龄\",{\"1\":{\"21\":1}}],[\"满足结婚年龄\",{\"1\":{\"21\":1}}],[\"满足成年了\",{\"1\":{\"21\":1}}],[\"要不然的话\",{\"1\":{\"21\":1}}],[\"老年\",{\"1\":{\"21\":1}}],[\"老家在苏北小县城\",{\"1\":{\"1\":1}}],[\"你的\",{\"1\":{\"21\":1}}],[\"你未成年\",{\"1\":{\"21\":1}}],[\"你可以在没有大括号的情况下编写\",{\"1\":{\"21\":1}}],[\"你可以选择在运行时执行\",{\"1\":{\"16\":1}}],[\"你可以使用命令行参数来决定在运行时执行哪一部分代码\",{\"1\":{\"16\":1}}],[\"<=\",{\"1\":{\"21\":10}}],[\"<\",{\"1\":{\"21\":3,\"24\":1}}],[\"<stdlib\",{\"1\":{\"16\":1}}],[\"<stdio\",{\"1\":{\"7\":1,\"16\":5,\"17\":1,\"21\":9,\"24\":1}}],[\"否则执行else\",{\"1\":{\"21\":1}}],[\"否则都是变量的定义\",{\"1\":{\"16\":1}}],[\"嵌套\",{\"1\":{\"21\":2}}],[\"由一个布尔表达式后跟一个或多个语句组成\",{\"1\":{\"21\":1}}],[\"由于这是字符串常量\",{\"1\":{\"9\":1}}],[\"语句用于输出九九乘法表中每一项的表达式\",{\"1\":{\"21\":1}}],[\"语句允许测试一个变量等于多个值时的情况\",{\"1\":{\"21\":1}}],[\"语句内使用另一个\",{\"1\":{\"21\":2}}],[\"语句在布尔表达式为假时执行\",{\"1\":{\"21\":1}}],[\"语句\",{\"1\":{\"21\":12}}],[\"语言还允许我们使用指针来处理数组\",{\"1\":{\"24\":1}}],[\"语言支持数组数据结构\",{\"1\":{\"24\":1}}],[\"语言提供了以下类型的判断语句\",{\"1\":{\"21\":1}}],[\"语言中的一个输入函数\",{\"1\":{\"10\":1}}],[\"语言中\",{\"1\":{\"9\":1,\"13\":1,\"15\":1}}],[\"语言中需要由双引号括起来\",{\"0\":{\"9\":1}}],[\"点击链接查看每个语句的细节\",{\"1\":{\"21\":1}}],[\"判断语句\",{\"1\":{\"21\":1}}],[\"windows\",{\"2\":{\"20\":1,\"23\":1,\"26\":1}}],[\"while\",{\"1\":{\"11\":1}}],[\"称为逻辑非运算符\",{\"1\":{\"18\":1}}],[\"称为逻辑或运算符\",{\"1\":{\"18\":1}}],[\"称为逻辑与运算符\",{\"1\":{\"18\":1}}],[\"||\",{\"1\":{\"18\":2,\"21\":1}}],[\"则条件为真\",{\"1\":{\"18\":2}}],[\"实例\",{\"1\":{\"18\":1}}],[\"实际项目中可能需要更复杂的错误检查和处理机制\",{\"1\":{\"16\":1}}],[\"描述\",{\"1\":{\"18\":1,\"21\":1}}],[\"示例\",{\"1\":{\"17\":2}}],[\"70\",{\"1\":{\"21\":2}}],[\"7\",{\"1\":{\"17\":1,\"21\":3}}],[\"6\",{\"1\":{\"17\":1,\"21\":4}}],[\"杂项运算符\",{\"1\":{\"16\":1,\"18\":1}}],[\"位运算符\",{\"1\":{\"16\":1,\"18\":1}}],[\"逻辑运算符\",{\"0\":{\"18\":1},\"1\":{\"16\":1}}],[\"关系运算符\",{\"1\":{\"16\":1,\"17\":1}}],[\"关键字进行的\",{\"1\":{\"16\":1}}],[\"关键字\",{\"1\":{\"11\":1}}],[\"关键字等\",{\"1\":{\"9\":1}}],[\"算术运算符\",{\"0\":{\"17\":1},\"1\":{\"16\":1}}],[\"此时rush\",{\"1\":{\"21\":1}}],[\"此时\",{\"1\":{\"21\":1}}],[\"此示例中的错误处理较为简单\",{\"1\":{\"16\":1}}],[\"此外\",{\"1\":{\"16\":1}}],[\"my\",{\"1\":{\"16\":2}}],[\"main\",{\"1\":{\"7\":1,\"16\":16,\"17\":1,\"21\":9,\"24\":1}}],[\"或\",{\"1\":{\"16\":1,\"21\":2}}],[\"或者你的英语成绩不合格\",{\"1\":{\"21\":1}}],[\"或者\",{\"1\":{\"12\":1}}],[\"u\",{\"1\":{\"24\":2}}],[\"usage\",{\"1\":{\"16\":1}}],[\"union\",{\"1\":{\"11\":1}}],[\"unsigned\",{\"1\":{\"11\":1,\"24\":1}}],[\">\",{\"1\":{\"16\":1}}],[\">=50\",{\"1\":{\"21\":1}}],[\">=\",{\"1\":{\"7\":1,\"21\":5}}],[\"但它往往被认为是一系列相同类型的变量\",{\"1\":{\"24\":1}}],[\"但不建议又过多的if\",{\"1\":{\"21\":1}}],[\"但你可以通过使用函数来模块化你的代码\",{\"1\":{\"16\":1}}],[\"但是定义与初始化在addtwonum\",{\"1\":{\"16\":1}}],[\"但是为了增强可读性\",{\"1\":{\"12\":1}}],[\"但是我只能在b站上跟着视频学习去敲项目代码\",{\"1\":{\"2\":1}}],[\"表达式++i的值是i的递增后的值\",{\"1\":{\"17\":1}}],[\"表达式i++的值是当前的i值\",{\"1\":{\"17\":1}}],[\"表明它是在其他文件中定义的\",{\"1\":{\"16\":1}}],[\"表示至少输出两个字符的整数\",{\"1\":{\"21\":1}}],[\"表示变量的数据类型\",{\"1\":{\"15\":2}}],[\"表示没有值的数据类型\",{\"1\":{\"13\":1}}],[\"表示程序将等待用户输入一个整数\",{\"1\":{\"10\":1}}],[\"表示安全版本\",{\"1\":{\"10\":1}}],[\"表示一系列字符的序列\",{\"1\":{\"9\":1}}],[\"表示在字符串中要插入字符串和整数的位置\",{\"1\":{\"9\":1}}],[\"需要注意的是\",{\"1\":{\"16\":1}}],[\"需要知道它可以将读取到的值存储在哪里\",{\"1\":{\"10\":1}}],[\"获取并打印这两个变量的和\",{\"1\":{\"16\":1}}],[\"获取水果的总数\",{\"1\":{\"12\":1}}],[\"然后使用\",{\"1\":{\"24\":1}}],[\"然后再使用新值\",{\"1\":{\"21\":1}}],[\"然后再递增\",{\"1\":{\"21\":1}}],[\"然后将\",{\"1\":{\"21\":2}}],[\"然后更新后的值在表达式中被使用\",{\"1\":{\"17\":1}}],[\"然后i增加1\",{\"1\":{\"17\":1}}],[\"然后i被递增\",{\"1\":{\"17\":1}}],[\"然后在每次循环中\",{\"1\":{\"21\":1}}],[\"然后在\",{\"1\":{\"16\":1}}],[\"然后\",{\"1\":{\"16\":1}}],[\"然后等待用户输入年龄\",{\"1\":{\"8\":1}}],[\"注意\",{\"1\":{\"16\":1}}],[\"该函数通过使用外部变量\",{\"1\":{\"16\":1}}],[\"该范围内的值都可以存储在内存中\",{\"1\":{\"14\":1}}],[\"不成年\",{\"1\":{\"21\":1}}],[\"不需要在函数内部进行额外的初始化步骤\",{\"1\":{\"16\":1}}],[\"不是定义\",{\"1\":{\"16\":1}}],[\"不是必要的\",{\"1\":{\"8\":1}}],[\"调试运行\",{\"1\":{\"24\":1}}],[\"调试\",{\"1\":{\"21\":1}}],[\"调试必报错\",{\"1\":{\"8\":1}}],[\"调用函数\",{\"1\":{\"16\":2}}],[\"赋值后再减\",{\"1\":{\"17\":1}}],[\"赋值后再加\",{\"1\":{\"17\":1}}],[\"赋值运算符\",{\"1\":{\"16\":1,\"18\":1}}],[\"赋值\",{\"1\":{\"16\":1}}],[\"全局变量\",{\"1\":{\"16\":2}}],[\"给外部变量\",{\"1\":{\"16\":1}}],[\"y\",{\"1\":{\"16\":16}}],[\"your\",{\"1\":{\"7\":1,\"8\":4,\"9\":2,\"21\":3}}],[\"除非有extern关键字\",{\"1\":{\"16\":1}}],[\"通过在命令行中提供参数\",{\"1\":{\"16\":1}}],[\"通过调用\",{\"1\":{\"16\":1}}],[\"通过使用extern关键字声明变量名而不定义它\",{\"1\":{\"16\":1}}],[\"通常用于更新循环控制变量的值\",{\"1\":{\"21\":1}}],[\"通常用于初始化循环控制变量\",{\"1\":{\"21\":1}}],[\"通常用于函数返回值\",{\"1\":{\"13\":1}}],[\"通常是一个空白符\",{\"1\":{\"12\":1}}],[\"另一种是不需要建立存储空间的\",{\"1\":{\"16\":1}}],[\"另一方面\",{\"1\":{\"12\":1}}],[\"举个简单例子吧\",{\"1\":{\"16\":1}}],[\"举个例子\",{\"1\":{\"15\":1}}],[\"举例\",{\"1\":{\"15\":1}}],[\"z\",{\"1\":{\"15\":2}}],[\"50\",{\"1\":{\"24\":1}}],[\"5的原话\",{\"1\":{\"16\":1}}],[\"5\",{\"1\":{\"15\":2,\"17\":3,\"21\":9,\"24\":2}}],[\"整型变量x定义\",{\"1\":{\"15\":1}}],[\"整型变量\",{\"1\":{\"15\":1}}],[\"整个语句的效果是将字符串\",{\"1\":{\"8\":1}}],[\"x+y\",{\"1\":{\"16\":1}}],[\"x\",{\"1\":{\"15\":4,\"16\":16}}],[\"再进行赋值\",{\"1\":{\"15\":1}}],[\"后的值\",{\"1\":{\"21\":1}}],[\"后的语句\",{\"1\":{\"21\":1}}],[\"后缀递增\",{\"1\":{\"21\":1}}],[\"后可跟一个可选的\",{\"1\":{\"21\":1}}],[\"后增量\",{\"1\":{\"17\":1}}],[\"后续初始化变量\",{\"1\":{\"15\":1}}],[\"后面英语分数和iq满足一项就可以执行\",{\"1\":{\"21\":1}}],[\"后面跟变量名\",{\"1\":{\"15\":1}}],[\"后面紧跟一个冒号和一个空格组成的字符串\",{\"1\":{\"8\":1}}],[\"后跟一个常量表达式组成\",{\"1\":{\"15\":1}}],[\"k\",{\"1\":{\"15\":4}}],[\"j\",{\"1\":{\"15\":4}}],[\"java也是这样\",{\"1\":{\"8\":1}}],[\"定义两个全局变量\",{\"1\":{\"16\":1}}],[\"定义并初始化\",{\"1\":{\"15\":2}}],[\"定义多个变量\",{\"1\":{\"15\":1}}],[\"定义指针变量\",{\"1\":{\"15\":1}}],[\"定义字符型变量\",{\"1\":{\"15\":1}}],[\"定义浮点型变量\",{\"1\":{\"15\":1}}],[\"定义整型变量\",{\"1\":{\"15\":1}}],[\"定义常量\",{\"1\":{\"11\":1}}],[\"且以字母或下划线开头\",{\"1\":{\"15\":1}}],[\"多个变量之间用逗号\",{\"1\":{\"15\":1}}],[\"指针等\",{\"1\":{\"15\":1}}],[\"指针类型和结构体类型\",{\"1\":{\"13\":1}}],[\"line\",{\"1\":{\"17\":7}}],[\"list\",{\"1\":{\"15\":2}}],[\"long\",{\"1\":{\"11\":1}}],[\"visual\",{\"2\":{\"20\":1,\"23\":1,\"26\":1}}],[\"value\",{\"1\":{\"15\":3}}],[\"variable\",{\"1\":{\"15\":6}}],[\"volatile\",{\"1\":{\"11\":1}}],[\"void\",{\"1\":{\"7\":1,\"11\":1,\"13\":2,\"16\":3,\"21\":2}}],[\"即rush\",{\"1\":{\"21\":1}}],[\"即\",{\"1\":{\"21\":1}}],[\"即大写字母和小写字母被视为不同字符\",{\"1\":{\"15\":1}}],[\"即所占字节数\",{\"1\":{\"11\":1}}],[\"数组\",{\"1\":{\"24\":1}}],[\"数组的元素下标从0开始\",{\"1\":{\"24\":1}}],[\"数组的声明并不是声明一个个单独的变量\",{\"1\":{\"24\":1}}],[\"数组长度\",{\"1\":{\"24\":1}}],[\"数组名称\",{\"1\":{\"24\":1}}],[\"数组类型\",{\"1\":{\"24\":1}}],[\"数组中的特定元素可以通过索引访问\",{\"1\":{\"24\":1}}],[\"数组是用来存储一系列数据\",{\"1\":{\"24\":1}}],[\"数字和下划线组成\",{\"1\":{\"15\":1}}],[\"数字和下划线\",{\"1\":{\"15\":1}}],[\"数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统\",{\"1\":{\"13\":1}}],[\"变量在头部就已经被声明\",{\"1\":{\"16\":1}}],[\"变量声明只在编译时有它的意义\",{\"1\":{\"16\":1}}],[\"变量声明向编译器保证变量以指定的类型和名称存在\",{\"1\":{\"16\":1}}],[\"变量ch初始化为字符\",{\"1\":{\"15\":1}}],[\"变量pi初始化为3\",{\"1\":{\"15\":1}}],[\"变量x初始化为20\",{\"1\":{\"15\":1}}],[\"变量初始化\",{\"1\":{\"15\":2}}],[\"变量由字母\",{\"1\":{\"15\":1}}],[\"变量定义\",{\"1\":{\"15\":1}}],[\"变量定义指定一个数据类型\",{\"1\":{\"15\":1}}],[\"变量定义就是告诉编译器在何处创建变量的存储\",{\"1\":{\"15\":1}}],[\"变量名必须以字母或下划线开头\",{\"1\":{\"15\":1}}],[\"变量名可以包含字母\",{\"1\":{\"15\":1}}],[\"变量的声明有两种情况\",{\"1\":{\"16\":1}}],[\"变量的初始化可以在定义时进行\",{\"1\":{\"15\":1}}],[\"变量的初始化是在定义变量的同时为其赋予一个初始值\",{\"1\":{\"15\":1}}],[\"变量的命名规则\",{\"0\":{\"15\":1}}],[\"变量的类型决定了变量存储占用的空间\",{\"1\":{\"13\":1}}],[\"变量其实只不过是程序可操作的存储区的名称\",{\"1\":{\"14\":1}}],[\"派生类型\",{\"1\":{\"13\":1}}],[\"404\",{\"1\":{\"27\":1}}],[\"4\",{\"0\":{\"14\":1},\"1\":{\"13\":1,\"17\":1,\"21\":4}}],[\"类型决定了变量存储的大小和布局\",{\"1\":{\"14\":1}}],[\"类型说明符\",{\"1\":{\"13\":1}}],[\"类型\",{\"1\":{\"13\":1}}],[\"类型与描述\",{\"1\":{\"13\":1}}],[\"被设置为0\",{\"1\":{\"21\":1}}],[\"被初始化为0\",{\"1\":{\"21\":1}}],[\"被定义为一个整型指针变量\",{\"1\":{\"15\":1}}],[\"被定义为一个整型变量\",{\"1\":{\"15\":1}}],[\"被定义为一个字符型变量\",{\"1\":{\"15\":1}}],[\"被定义为一个浮点型变量\",{\"1\":{\"15\":1}}],[\"被用来定义在程序中只能赋予其一定的离散整数值的变量\",{\"1\":{\"13\":1}}],[\"被称为空白行\",{\"1\":{\"12\":1}}],[\"枚举类型\",{\"1\":{\"13\":1}}],[\"浮点型变量pi定义\",{\"1\":{\"15\":1}}],[\"浮点型变量\",{\"1\":{\"15\":1}}],[\"浮点型\",{\"1\":{\"13\":1,\"15\":1}}],[\"字符型变量ch定义\",{\"1\":{\"15\":1}}],[\"字符型变量\",{\"1\":{\"15\":1}}],[\"字符型\",{\"1\":{\"13\":1,\"15\":1}}],[\"字符串是由字符组成的字符数组\",{\"1\":{\"9\":1}}],[\"字符串常量是一种特殊的常量\",{\"1\":{\"9\":1}}],[\"字符串常量\",{\"1\":{\"8\":1}}],[\"基本数据类型\",{\"1\":{\"13\":1}}],[\"毕竟人家的代码都有空格\",{\"1\":{\"12\":1}}],[\"我会举个简单的例子\",{\"1\":{\"21\":1}}],[\"我会问问chatgdp\",{\"1\":{\"6\":1}}],[\"我觉得代码还是都加空格\",{\"1\":{\"12\":1}}],[\"您可以根据需要适当增加一些空格\",{\"1\":{\"12\":1}}],[\"之间的空格字符不是必需的\",{\"1\":{\"12\":1}}],[\"之间必须至少有一个空格字符\",{\"1\":{\"12\":1}}],[\"oranges\",{\"1\":{\"12\":1}}],[\"+=\",{\"1\":{\"21\":7}}],[\"++\",{\"1\":{\"17\":2,\"21\":1}}],[\"++i\",{\"1\":{\"17\":2,\"21\":1}}],[\"+\",{\"1\":{\"12\":1,\"16\":2,\"17\":1,\"21\":11}}],[\"下标是1\",{\"1\":{\"24\":1}}],[\"下标\",{\"1\":{\"24\":1}}],[\"下面这一段讲main\",{\"1\":{\"16\":1}}],[\"下面列举几个实例\",{\"1\":{\"15\":1}}],[\"下面列出几个有效的声明\",{\"1\":{\"15\":1}}],[\"下面是两个不同的输出语句\",{\"1\":{\"8\":1}}],[\"下一个元素在哪里开始\",{\"1\":{\"12\":1}}],[\"比如整形int\",{\"1\":{\"15\":1}}],[\"比如\",{\"1\":{\"12\":1,\"24\":2}}],[\"比如变量名\",{\"1\":{\"9\":1}}],[\"让编译器能识别语句中的某个元素\",{\"1\":{\"12\":1}}],[\"空格分隔语句的各个部分\",{\"1\":{\"12\":1}}],[\"空格用于描述空白符\",{\"1\":{\"12\":1}}],[\"制表符\",{\"1\":{\"12\":1}}],[\"编译器会完全忽略它\",{\"1\":{\"12\":1}}],[\"可以理解为要不然\",{\"1\":{\"21\":1}}],[\"可以嵌套使用\",{\"1\":{\"21\":1}}],[\"可以在一个\",{\"1\":{\"21\":2}}],[\"可以在声明变量的同时进行初始化\",{\"1\":{\"16\":1}}],[\"可以在别的文件中定义的\",{\"1\":{\"16\":1}}],[\"可以使用赋值运算符\",{\"1\":{\"15\":1}}],[\"可以由一个或多个变量的名称组成\",{\"1\":{\"15\":1}}],[\"可以是整型\",{\"1\":{\"15\":1}}],[\"可以带参数\",{\"1\":{\"11\":1}}],[\"可能带有注释\",{\"1\":{\"12\":1}}],[\"只包含空格的行\",{\"1\":{\"12\":1}}],[\"用来逆转操作数的逻辑状态\",{\"1\":{\"18\":1}}],[\"用以给数据类型取别名\",{\"1\":{\"11\":1}}],[\"用于在输出中产生水平制表\",{\"1\":{\"21\":2}}],[\"用于生成斐波那契数列的前n个数字\",{\"1\":{\"21\":1}}],[\"用于重复执行一组语句\",{\"1\":{\"21\":1}}],[\"用于开关语句\",{\"1\":{\"11\":1}}],[\"用于读取整数\",{\"1\":{\"10\":1}}],[\"用于指定在运行时插入数据的位置和类型\",{\"1\":{\"9\":1}}],[\"用于获取用户的年龄信息\",{\"1\":{\"8\":1}}],[\"计算数据类型或变量长度\",{\"1\":{\"11\":1}}],[\"子程序返回语句\",{\"1\":{\"11\":1}}],[\"条件语句\",{\"1\":{\"11\":1}}],[\"条件语句否定分支\",{\"1\":{\"11\":1}}],[\"一个\",{\"1\":{\"21\":3}}],[\"一开始前面结果不变\",{\"1\":{\"17\":1}}],[\"一种是需要建立存储空间的\",{\"1\":{\"16\":1}}],[\"一种循环语句\",{\"1\":{\"11\":1}}],[\"一旦用户输入了整数\",{\"1\":{\"10\":1}}],[\"found\",{\"1\":{\"27\":1}}],[\"for\",{\"1\":{\"11\":1,\"21\":19,\"24\":1}}],[\"first\",{\"1\":{\"21\":4}}],[\"false\",{\"1\":{\"21\":1}}],[\"function\",{\"1\":{\"16\":8}}],[\"f\",{\"1\":{\"15\":4}}],[\"fruit\",{\"1\":{\"12\":2}}],[\"frank的视频\",{\"1\":{\"6\":1}}],[\"float\",{\"1\":{\"11\":1,\"13\":1,\"15\":3}}],[\"even\",{\"1\":{\"21\":16}}],[\"english\",{\"1\":{\"21\":4}}],[\"enum\",{\"1\":{\"11\":1}}],[\"expression\",{\"1\":{\"21\":1}}],[\"extern\",{\"1\":{\"11\":1,\"15\":1,\"16\":7}}],[\"else\",{\"1\":{\"11\":1,\"16\":1,\"21\":13}}],[\"连用\",{\"1\":{\"11\":1}}],[\"与\",{\"1\":{\"11\":1}}],[\"分隔\",{\"1\":{\"15\":1}}],[\"分支\",{\"1\":{\"11\":1}}],[\"分号不写\",{\"1\":{\"8\":1}}],[\"分号是语句结束符\",{\"1\":{\"8\":1}}],[\"分号\",{\"1\":{\"8\":1}}],[\"其它\",{\"1\":{\"11\":1}}],[\"其中变量\",{\"1\":{\"16\":1}}],[\"其中的\",{\"1\":{\"10\":1}}],[\"其中\",{\"1\":{\"9\":1,\"15\":1,\"21\":2}}],[\"开始结果和i都增加1\",{\"1\":{\"17\":1}}],[\"开始下一轮循环\",{\"1\":{\"11\":1}}],[\"开关语句中的\",{\"1\":{\"11\":1}}],[\"开关语句分支\",{\"1\":{\"11\":1}}],[\"结束当前循环\",{\"1\":{\"11\":1}}],[\"修饰\",{\"1\":{\"11\":1}}],[\"如果乘积是个位数\",{\"1\":{\"21\":1}}],[\"如果\",{\"1\":{\"21\":1}}],[\"如果条件为假\",{\"1\":{\"21\":1}}],[\"如果条件为真\",{\"1\":{\"21\":1}}],[\"如果条件为真则逻辑非运算符将使其为假\",{\"1\":{\"18\":1}}],[\"如果布尔表达式为假将执行的语句\",{\"1\":{\"21\":1}}],[\"如果布尔表达式为真将执行的语句\",{\"1\":{\"21\":1}}],[\"如果两个操作数中有任意一个非零\",{\"1\":{\"18\":1}}],[\"如果两个操作数都非零\",{\"1\":{\"18\":1}}],[\"如果一个变量被\",{\"1\":{\"11\":1}}],[\"如下所示\",{\"1\":{\"15\":2}}],[\"如何解释输入\",{\"1\":{\"10\":1}}],[\"声明\",{\"1\":{\"16\":2}}],[\"声明并定义了变量\",{\"1\":{\"15\":1}}],[\"声明无类型指针\",{\"1\":{\"11\":1}}],[\"声明无符号类型变量或函数\",{\"1\":{\"11\":1}}],[\"声明函数无返回值或无参数\",{\"1\":{\"11\":1}}],[\"声明共用体类型\",{\"1\":{\"11\":1}}],[\"声明结构体类型\",{\"1\":{\"11\":1}}],[\"声明静态变量\",{\"1\":{\"11\":1}}],[\"声明有符号类型变量或函数\",{\"1\":{\"11\":1}}],[\"声明短整型变量或函数\",{\"1\":{\"11\":1}}],[\"声明寄存器变量\",{\"1\":{\"11\":1}}],[\"声明长整型变量或函数返回值类型\",{\"1\":{\"11\":1}}],[\"声明整型变量或函数\",{\"1\":{\"11\":1}}],[\"声明浮点型变量或函数返回值类型\",{\"1\":{\"11\":1}}],[\"声明变量或函数是在其它文件或本文件的其他位置定义\",{\"1\":{\"11\":1}}],[\"声明枚举类型\",{\"1\":{\"11\":1}}],[\"声明双精度浮点型变量或函数返回值类型\",{\"1\":{\"11\":1}}],[\"声明字符型变量或函数返回值类型\",{\"1\":{\"11\":1}}],[\"声明自动变量\",{\"1\":{\"11\":1}}],[\"跳出当前循环\",{\"1\":{\"11\":1}}],[\"b站视频代码\",{\"1\":{\"24\":1}}],[\"b站up主micro\",{\"1\":{\"6\":1}}],[\"boolean\",{\"1\":{\"21\":1}}],[\"b\",{\"1\":{\"15\":2,\"17\":6,\"18\":3}}],[\"byte\",{\"1\":{\"15\":1}}],[\"break\",{\"1\":{\"11\":1,\"16\":3,\"21\":8}}],[\"说明变量在程序执行中可被隐含地改变\",{\"1\":{\"11\":1}}],[\"说明\",{\"1\":{\"11\":1}}],[\"以下是一个简单的c语言程序\",{\"1\":{\"21\":1}}],[\"以下是一个简单的c语言示例\",{\"1\":{\"16\":1}}],[\"以下是你的代码的修正版\",{\"1\":{\"21\":1}}],[\"以达到类似于多个入口点的效果\",{\"1\":{\"16\":1}}],[\"以上代码中\",{\"1\":{\"15\":4}}],[\"以及如何创建变量的存储\",{\"1\":{\"15\":1}}],[\"以及如何解释存储的位模式\",{\"1\":{\"13\":1}}],[\"以便在程序中进一步使用\",{\"1\":{\"10\":1}}],[\"以后忘了c语言也会看看日记\",{\"1\":{\"6\":1}}],[\"中年\",{\"1\":{\"21\":1}}],[\"中语句是条件\",{\"1\":{\"21\":1}}],[\"中每个变量都有特定的类型\",{\"1\":{\"14\":1}}],[\"中的变量声明\",{\"0\":{\"16\":1}}],[\"中的变量定义\",{\"1\":{\"15\":1}}],[\"中的类型可分为以下几种\",{\"1\":{\"13\":1}}],[\"中的空格\",{\"0\":{\"12\":1}}],[\"中\",{\"1\":{\"10\":1,\"12\":1,\"21\":2}}],[\"中表示了\",{\"1\":{\"8\":1}}],[\"综合起来\",{\"1\":{\"10\":1}}],[\"运算符\",{\"1\":{\"18\":1}}],[\"运算符是一种告诉编译器执行特定的数学或逻辑操作的符号\",{\"1\":{\"16\":1}}],[\"运算符可应用于变量上\",{\"1\":{\"14\":1}}],[\"运算符用于获取变量\",{\"1\":{\"10\":1}}],[\"运行这段代码时\",{\"1\":{\"8\":1}}],[\"取地址\",{\"1\":{\"10\":1}}],[\"并返回结果\",{\"1\":{\"16\":1}}],[\"并避免了在函数内部进行额外的初始化步骤\",{\"1\":{\"16\":1}}],[\"并包含了该类型的一个或多个变量的列表\",{\"1\":{\"15\":1}}],[\"并将输入的字符解释为整数\",{\"1\":{\"10\":1}}],[\"并且\",{\"1\":{\"8\":1,\"21\":1}}],[\"期望输入一个整数\",{\"1\":{\"10\":1}}],[\"告诉\",{\"1\":{\"10\":2}}],[\"告诉用户需要输入年龄\",{\"1\":{\"8\":1}}],[\"特别是防范缓冲区溢出的风险\",{\"1\":{\"10\":1}}],[\"特长\",{\"1\":{\"1\":1}}],[\"双引号是c语言中用于表示字符串常量的规定方式\",{\"1\":{\"9\":1}}],[\"双引号告诉编译器这是一个字符串\",{\"1\":{\"9\":1}}],[\"==\",{\"1\":{\"21\":5}}],[\"=\",{\"1\":{\"9\":1,\"12\":3,\"15\":14,\"16\":10,\"17\":13,\"21\":37,\"24\":3}}],[\"围绕在双引号中\",{\"1\":{\"9\":1}}],[\"格式化字符串包含格式说明符\",{\"1\":{\"9\":1}}],[\"而是声明一个数组变量\",{\"1\":{\"24\":1}}],[\"而是可以直接在函数中使用这两个已经初始化的全局变量\",{\"1\":{\"16\":1}}],[\"而实际的变量声明在其他文件中\",{\"1\":{\"16\":1}}],[\"而不是在函数内部进行\",{\"1\":{\"16\":1}}],[\"而不是一个变量名或其他什么\",{\"1\":{\"9\":1}}],[\"而这个数组用于存储名字\",{\"1\":{\"9\":1}}],[\"而字符串常量是这样的字符数组的一种表示方式\",{\"1\":{\"9\":1}}],[\"而字符串常量在\",{\"0\":{\"9\":1}}],[\"而普通字符串常量只是字符序列\",{\"1\":{\"9\":1}}],[\"而\",{\"1\":{\"9\":1,\"21\":2}}],[\"generatefibonacci\",{\"1\":{\"21\":2}}],[\"gold\",{\"1\":{\"21\":1}}],[\"goto\",{\"1\":{\"11\":1}}],[\"gpt原话\",{\"1\":{\"16\":1}}],[\"grade\",{\"1\":{\"15\":2}}],[\"guyindong\",{\"1\":{\"9\":5}}],[\"github\",{\"1\":{\"1\":1}}],[\"对于格式字符串\",{\"0\":{\"9\":1}}],[\"对web前端和网络感兴趣\",{\"1\":{\"2\":1}}],[\"生成解决方案会报错\",{\"1\":{\"8\":1}}],[\"忘记引号\",{\"1\":{\"8\":1}}],[\"为真\",{\"1\":{\"18\":2}}],[\"为假\",{\"1\":{\"18\":1}}],[\"为\",{\"1\":{\"16\":3,\"17\":4}}],[\"为外部变量\",{\"1\":{\"16\":1}}],[\"为变量赋予一个新的值\",{\"1\":{\"15\":1}}],[\"为了提高程序的安全性\",{\"1\":{\"10\":1}}],[\"为啥一定要引号\",{\"1\":{\"8\":1}}],[\"为什么会有自己的网站\",{\"1\":{\"2\":1}}],[\"例如\",{\"1\":{\"8\":1,\"9\":1,\"16\":2,\"21\":1}}],[\"引号是用于定义字符串常量的语法规则\",{\"1\":{\"9\":1}}],[\"引号是必需的\",{\"0\":{\"9\":1}}],[\"引号\",{\"1\":{\"8\":1}}],[\"尤其是后面要写成百上千行代码\",{\"1\":{\"8\":1}}],[\"有些人刚学代码就容易忘加分号\",{\"1\":{\"8\":1}}],[\"有些喜欢折腾网络\",{\"1\":{\"1\":1}}],[\"没有分号就不是一个完整的语句\",{\"1\":{\"8\":1}}],[\"程序可读性\",{\"1\":{\"21\":2}}],[\"程序可以分成多个代码文件\",{\"1\":{\"16\":1}}],[\"程序会通过\",{\"1\":{\"16\":1}}],[\"程序会向用户输出\",{\"1\":{\"8\":1}}],[\"程序中\",{\"1\":{\"8\":1}}],[\"column++\",{\"1\":{\"21\":2}}],[\"column\",{\"1\":{\"21\":9}}],[\"condition\",{\"1\":{\"21\":2}}],[\"continue\",{\"1\":{\"11\":1}}],[\"const\",{\"1\":{\"11\":2}}],[\"choice\",{\"1\":{\"16\":2}}],[\"ch\",{\"1\":{\"15\":4}}],[\"char\",{\"1\":{\"9\":1,\"11\":1,\"13\":1,\"15\":3,\"16\":1}}],[\"case\",{\"1\":{\"11\":1,\"16\":2,\"21\":7}}],[\"c\",{\"0\":{\"9\":1,\"12\":1,\"16\":1},\"1\":{\"8\":1,\"9\":1,\"10\":1,\"12\":2,\"13\":2,\"14\":1,\"15\":1,\"16\":2,\"17\":24,\"21\":1,\"24\":2}}],[\"c语言数组与指针\",{\"0\":{\"24\":1}}],[\"c语言数据类型\",{\"0\":{\"13\":1}}],[\"c语言循环基础\",{\"1\":{\"21\":1}}],[\"c语言判断与循环\",{\"0\":{\"21\":1}}],[\"c语言\",{\"2\":{\"19\":1,\"22\":1,\"25\":1}}],[\"c语言中以下类型的运算符\",{\"1\":{\"16\":1}}],[\"c语言变量\",{\"0\":{\"14\":1}}],[\"c语言关键字\",{\"0\":{\"11\":1}}],[\"c语言输入的格式\",{\"0\":{\"10\":1}}],[\"c语言程序基本结构\",{\"0\":{\"7\":1}}],[\"c语言基础类型\",{\"0\":{\"6\":1}}],[\"在我本地visual\",{\"1\":{\"24\":1}}],[\"在内层循环中\",{\"1\":{\"21\":1}}],[\"在循环结束时\",{\"1\":{\"21\":1}}],[\"在循环开始前初始化循环控制变量\",{\"1\":{\"21\":1}}],[\"在循环开始之前执行一次\",{\"1\":{\"21\":1}}],[\"在第二次迭代中\",{\"1\":{\"21\":1}}],[\"在第二次循环迭代中\",{\"1\":{\"21\":1}}],[\"在第一次循环迭代中\",{\"1\":{\"21\":1}}],[\"在上述的c程序中\",{\"1\":{\"21\":1}}],[\"在你的代码中\",{\"1\":{\"21\":1}}],[\"在每次循环迭代时将当前的\",{\"1\":{\"21\":1}}],[\"在每次循环迭代时执行的一组语句\",{\"1\":{\"21\":1}}],[\"在每次循环迭代后将\",{\"1\":{\"21\":1}}],[\"在每次循环迭代前检查\",{\"1\":{\"21\":1}}],[\"在每次循环迭代之后执行\",{\"1\":{\"21\":1}}],[\"在每次循环迭代之前检查的条件\",{\"1\":{\"21\":1}}],[\"在声明的同时被初始化为\",{\"1\":{\"16\":1}}],[\"在声明的时候就已经建立了存储空间\",{\"1\":{\"16\":1}}],[\"在声明时进行初始化\",{\"1\":{\"16\":1}}],[\"在c语言中\",{\"1\":{\"16\":2,\"21\":1}}],[\"在程序连接时编译器需要实际的变量声明\",{\"1\":{\"16\":1}}],[\"在变量定义后的代码中\",{\"1\":{\"15\":1}}],[\"在下面的语句中\",{\"1\":{\"12\":2}}],[\"在哪里结束\",{\"1\":{\"12\":1}}],[\"在\",{\"1\":{\"8\":1,\"9\":1,\"12\":1,\"13\":1,\"15\":1}}],[\"在这个例子中\",{\"1\":{\"16\":2}}],[\"在这个位置要插入一个整数值\",{\"1\":{\"8\":1}}],[\"在这里既是变量\",{\"1\":{\"8\":1}}],[\"在这里\",{\"1\":{\"8\":1,\"10\":1,\"12\":1}}],[\"已经在变量名\",{\"1\":{\"8\":1}}],[\"因为这样的代码结构可能会导致代码的可读性和维护性下降\",{\"1\":{\"16\":1}}],[\"因为格式字符串是一个字符串常量\",{\"0\":{\"9\":1}}],[\"因为\",{\"1\":{\"8\":1}}],[\"因此循环继续执行\",{\"1\":{\"21\":1}}],[\"因此去掉大括号是合法的\",{\"1\":{\"21\":1}}],[\"因此\",{\"1\":{\"8\":1,\"10\":1,\"12\":1,\"21\":1}}],[\"设计者可能认为在这里添加额外的\",{\"1\":{\"8\":1}}],[\"和双精度浮点型\",{\"1\":{\"13\":1}}],[\"和\",{\"1\":{\"9\":1,\"12\":3,\"15\":3,\"16\":10}}],[\"和空格\",{\"1\":{\"8\":1}}],[\"和变量\",{\"1\":{\"8\":1}}],[\"冒号在字符串外\",{\"1\":{\"8\":1}}],[\"冒号在字符串内\",{\"1\":{\"8\":1}}],[\"冒号\",{\"1\":{\"8\":1}}],[\"这使得对数组的操作更加灵活和高效\",{\"1\":{\"24\":1}}],[\"这个过程会一直重复\",{\"1\":{\"21\":1}}],[\"这个文件包含了两个全局变量\",{\"1\":{\"16\":1}}],[\"这个文件主要包含了一个函数\",{\"1\":{\"16\":1}}],[\"这一部分可以包含声明和赋值操作\",{\"1\":{\"21\":1}}],[\"这意味着i首先被递增\",{\"1\":{\"17\":1}}],[\"这意味着当前的i值在表达式中被使用\",{\"1\":{\"17\":1}}],[\"这将决定在\",{\"1\":{\"16\":1}}],[\"这里只是函数的定义\",{\"1\":{\"16\":1}}],[\"这提高了代码的可读性和维护性\",{\"1\":{\"16\":1}}],[\"这样的格式化输出有助于让输出结果整齐对齐\",{\"1\":{\"21\":1}}],[\"这样\",{\"1\":{\"16\":1}}],[\"这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译\",{\"1\":{\"16\":1}}],[\"这样编译器才能够区分它们\",{\"1\":{\"12\":1}}],[\"这指示编译器创建类型为\",{\"1\":{\"15\":1}}],[\"这行代码\",{\"1\":{\"10\":1}}],[\"这种用法通常不太推荐\",{\"1\":{\"16\":1}}],[\"这种规定有助于编译器正确地解释和处理源代码\",{\"1\":{\"9\":1}}],[\"这种方式在输出中提供了一些上下文信息\",{\"1\":{\"8\":1}}],[\"这是循环的主体\",{\"1\":{\"21\":1}}],[\"这是格式说明符\",{\"1\":{\"10\":1}}],[\"这是\",{\"1\":{\"10\":1}}],[\"这是因为在c语言中\",{\"1\":{\"9\":1}}],[\"这是为了提供输出的上下文信息\",{\"1\":{\"8\":1}}],[\"这是一个简单的用户交互示例\",{\"1\":{\"8\":1}}],[\"这是要输出的格式化字符串\",{\"1\":{\"8\":1}}],[\"这是c语言中用于输出格式化信息的函数\",{\"0\":{\"8\":1}}],[\"的当前值加到\",{\"1\":{\"21\":1}}],[\"的原始值\",{\"1\":{\"21\":1}}],[\"的初始值为\",{\"1\":{\"21\":1}}],[\"的和\",{\"1\":{\"16\":1,\"21\":2}}],[\"的声明是通过\",{\"1\":{\"16\":1}}],[\"的声明与初始化\",{\"1\":{\"15\":1}}],[\"的值超过100时\",{\"1\":{\"21\":1}}],[\"的值变为4\",{\"1\":{\"21\":1}}],[\"的值已经被自增为2\",{\"1\":{\"21\":1}}],[\"的值仍然是0\",{\"1\":{\"21\":2}}],[\"的值\",{\"1\":{\"21\":2}}],[\"的值为2\",{\"1\":{\"21\":1}}],[\"的值为\",{\"1\":{\"21\":5}}],[\"的值都会加到\",{\"1\":{\"21\":1}}],[\"的值增加\",{\"1\":{\"21\":1}}],[\"的值是2\",{\"1\":{\"21\":1}}],[\"的值是0\",{\"1\":{\"21\":1}}],[\"的值是\",{\"1\":{\"17\":7}}],[\"的值计算它们的和\",{\"1\":{\"16\":1}}],[\"的值以指定的格式输出到屏幕上\",{\"1\":{\"8\":1}}],[\"的定义\",{\"1\":{\"16\":2}}],[\"的变量\",{\"1\":{\"15\":1}}],[\"的名为\",{\"1\":{\"15\":1}}],[\"的内存地址\",{\"1\":{\"10\":1}}],[\"的安全版本\",{\"1\":{\"10\":1}}],[\"的字符序列\",{\"1\":{\"9\":1}}],[\"的位置\",{\"1\":{\"8\":1}}],[\"也是定义\",{\"1\":{\"16\":1}}],[\"也是整数值的提供者\",{\"1\":{\"8\":1}}],[\"也可以在后续的代码中进行\",{\"1\":{\"15\":1}}],[\"也可以是用户自定义的对象\",{\"1\":{\"15\":1}}],[\"也可不带参数\",{\"1\":{\"11\":1}}],[\"也就是说\",{\"1\":{\"8\":1,\"21\":1}}],[\"也想尝试去做点什么😭\",{\"1\":{\"2\":1}}],[\"函数中调用哪个功能函数\",{\"1\":{\"16\":1}}],[\"函数中调用这些函数\",{\"1\":{\"16\":1}}],[\"函数的是复制chatgdp3\",{\"1\":{\"16\":1}}],[\"函数计算并输出变量\",{\"1\":{\"16\":1}}],[\"函数外定义变量\",{\"1\":{\"16\":1}}],[\"函数内声明变量\",{\"1\":{\"16\":1}}],[\"函数内\",{\"1\":{\"16\":1}}],[\"函数参数的常规字符串\",{\"1\":{\"9\":1}}],[\"函数\",{\"1\":{\"8\":1,\"16\":3}}],[\"它可以存储一个固定大小的相同类型元素的顺序集合\",{\"1\":{\"24\":1}}],[\"它表示输出两个整数相乘的结果\",{\"1\":{\"21\":1}}],[\"它表明一个逻辑实体的结束\",{\"1\":{\"8\":1}}],[\"它们在此文件中分别被赋值为\",{\"1\":{\"16\":1}}],[\"它们也是算术类型\",{\"1\":{\"13\":1}}],[\"它们是算术类型\",{\"1\":{\"13\":1}}],[\"它将被存储在变量\",{\"1\":{\"10\":1}}],[\"它只是一个作为\",{\"1\":{\"9\":1}}],[\"它不是格式化字符串\",{\"1\":{\"9\":1}}],[\"它包含了字符\",{\"1\":{\"8\":1}}],[\"它使得输出的内容会换到下一行\",{\"1\":{\"8\":1}}],[\"它的值将替换\",{\"1\":{\"8\":1}}],[\"它告诉\",{\"1\":{\"8\":1}}],[\"它是程序的入口点\",{\"1\":{\"16\":1}}],[\"它是一个字符数组的初始化值\",{\"1\":{\"9\":1}}],[\"它是一条提示信息\",{\"1\":{\"8\":1}}],[\"它是字符\",{\"1\":{\"8\":1}}],[\"是制表符\",{\"1\":{\"21\":2}}],[\"是用来格式化整数的占位符\",{\"1\":{\"21\":1}}],[\"是2\",{\"1\":{\"21\":1}}],[\"是否小于1000\",{\"1\":{\"21\":1}}],[\"是否小于等于\",{\"1\":{\"21\":1}}],[\"是变量的初始值\",{\"1\":{\"15\":1}}],[\"是变量的名称\",{\"1\":{\"15\":1}}],[\"是\",{\"1\":{\"10\":1}}],[\"是为了在源代码中明确区分字符串常量和其他元素\",{\"1\":{\"9\":1}}],[\"是格式控制字符串\",{\"1\":{\"21\":1}}],[\"是格式化字符串\",{\"1\":{\"9\":1}}],[\"是格式说明符\",{\"1\":{\"8\":1,\"9\":1}}],[\"是一个普通的字符串常量\",{\"1\":{\"9\":1}}],[\"是一个完整的字符串\",{\"1\":{\"8\":1}}],[\"是一个换行符\",{\"1\":{\"8\":1}}],[\"是一个整数变量\",{\"1\":{\"8\":1}}],[\"是一个字符串常量\",{\"1\":{\"8\":1,\"9\":1}}],[\"0代码第一个元素\",{\"1\":{\"24\":1}}],[\"0到100的偶数和为\",{\"1\":{\"21\":1}}],[\"0\",{\"1\":{\"7\":1,\"16\":5,\"21\":19,\"24\":4}}],[\"允许玩\",{\"1\":{\"7\":1,\"21\":2}}],[\"成年\",{\"1\":{\"7\":1,\"21\":2}}],[\"i就是\",{\"1\":{\"21\":1}}],[\"i就是1\",{\"1\":{\"21\":1}}],[\"iq\",{\"1\":{\"21\":4}}],[\"i值增加1\",{\"1\":{\"17\":1}}],[\"i现在是6\",{\"1\":{\"17\":2}}],[\"i++\",{\"1\":{\"17\":2,\"21\":5,\"24\":1}}],[\"i\",{\"1\":{\"15\":4,\"16\":2,\"17\":4,\"21\":20,\"24\":3}}],[\"is\",{\"1\":{\"9\":2}}],[\"if\",{\"1\":{\"7\":1,\"11\":2,\"16\":1,\"21\":22}}],[\"increment\",{\"1\":{\"21\":2}}],[\"include\",{\"1\":{\"7\":1,\"16\":6,\"17\":1,\"21\":9,\"24\":1}}],[\"init\",{\"1\":{\"21\":2}}],[\"invalid\",{\"1\":{\"16\":1}}],[\"input\",{\"1\":{\"7\":1,\"8\":4,\"21\":3}}],[\"int\",{\"1\":{\"7\":2,\"11\":1,\"12\":3,\"13\":1,\"15\":9,\"16\":27,\"17\":8,\"21\":27,\"24\":2}}],[\"day\",{\"1\":{\"21\":3}}],[\"double\",{\"1\":{\"11\":1,\"13\":1}}],[\"do\",{\"1\":{\"11\":1}}],[\"default\",{\"1\":{\"11\":1,\"16\":1,\"21\":1}}],[\"d\",{\"1\":{\"7\":1,\"8\":3,\"9\":3,\"10\":5,\"15\":4,\"16\":3,\"17\":7,\"21\":17}}],[\"second\",{\"1\":{\"21\":4}}],[\"sum\",{\"1\":{\"21\":37}}],[\"score\",{\"1\":{\"21\":4}}],[\"scanf\",{\"1\":{\"7\":1,\"10\":8,\"21\":5}}],[\"salary\",{\"1\":{\"15\":2}}],[\"switch语句可以嵌套使用\",{\"1\":{\"21\":1}}],[\"switch\",{\"1\":{\"11\":1,\"16\":1,\"21\":6}}],[\"statement\",{\"1\":{\"21\":2}}],[\"static\",{\"1\":{\"11\":1}}],[\"studio\",{\"1\":{\"24\":1},\"2\":{\"20\":1,\"23\":1,\"26\":1}}],[\"struct\",{\"1\":{\"11\":1}}],[\"sizeof\",{\"1\":{\"11\":1}}],[\"signed\",{\"1\":{\"11\":1}}],[\"short\",{\"1\":{\"11\":1}}],[\"s\",{\"1\":{\"7\":1,\"9\":3,\"10\":8,\"16\":1,\"21\":5}}],[\"not\",{\"1\":{\"27\":1}}],[\"n代表第几个元素\",{\"1\":{\"24\":1}}],[\"next\",{\"1\":{\"21\":3}}],[\"new\",{\"1\":{\"15\":1}}],[\"num\",{\"1\":{\"21\":21}}],[\"name\",{\"1\":{\"9\":1,\"15\":4}}],[\"n表示换行\",{\"1\":{\"8\":1}}],[\"n\",{\"1\":{\"7\":2,\"8\":5,\"9\":2,\"16\":5,\"17\":7,\"21\":33,\"24\":3}}],[\"plant\",{\"1\":{\"24\":2}}],[\"plants\",{\"1\":{\"24\":3}}],[\"please\",{\"1\":{\"7\":1,\"8\":4,\"21\":3}}],[\"program\",{\"1\":{\"16\":2}}],[\"printf语句输出了每一项的乘法表达式\",{\"1\":{\"21\":1}}],[\"printf\",{\"0\":{\"8\":1},\"1\":{\"7\":2,\"8\":5,\"9\":2,\"16\":7,\"17\":7,\"21\":31,\"24\":2}}],[\"pi\",{\"1\":{\"15\":4}}],[\"ptr\",{\"1\":{\"15\":2}}],[\"pages和vercel上\",{\"1\":{\"4\":1}}],[\"hello\",{\"1\":{\"9\":2}}],[\"h>\",{\"1\":{\"7\":1,\"16\":6,\"17\":1,\"21\":9,\"24\":1}}],[\"hope主题\",{\"1\":{\"4\":1}}],[\"遇到有疑问的代码\",{\"1\":{\"6\":1}}],[\"菜鸟教程\",{\"1\":{\"6\":1}}],[\"复习会结合chatgpt\",{\"1\":{\"6\":1}}],[\"人间正道是沧桑\",{\"1\":{\"5\":1}}],[\"咕东的主页天若有情天亦老\",{\"1\":{\"5\":1}}],[\"友情链接\",{\"0\":{\"5\":1}}],[\"部署在github\",{\"1\":{\"4\":1}}],[\"t\",{\"1\":{\"21\":5}}],[\"true\",{\"1\":{\"21\":1}}],[\"test\",{\"1\":{\"16\":1}}],[\"telegram\",{\"1\":{\"1\":1,\"3\":1}}],[\"type\",{\"1\":{\"15\":5}}],[\"typedef\",{\"1\":{\"11\":1}}],[\"theme\",{\"1\":{\"4\":1}}],[\"网站是基于vuepress的vuepess\",{\"1\":{\"4\":1}}],[\"30\",{\"1\":{\"21\":1}}],[\"3\",{\"0\":{\"13\":1},\"1\":{\"3\":1,\"13\":1,\"15\":5,\"17\":1,\"21\":6,\"24\":1}}],[\"邮箱\",{\"1\":{\"3\":1}}],[\"25\",{\"1\":{\"24\":1}}],[\"2d\",{\"1\":{\"21\":5}}],[\"21\",{\"1\":{\"17\":3,\"21\":1}}],[\"22\",{\"1\":{\"15\":1,\"17\":2}}],[\"20\",{\"1\":{\"9\":1,\"15\":1,\"21\":3}}],[\"2\",{\"0\":{\"10\":1},\"1\":{\"3\":1,\"13\":1,\"16\":12,\"17\":1,\"21\":7}}],[\"1=1\",{\"1\":{\"24\":1}}],[\"11\",{\"1\":{\"21\":1}}],[\"150\",{\"1\":{\"24\":1}}],[\"15\",{\"1\":{\"21\":1}}],[\"120\",{\"1\":{\"21\":1}}],[\"1|2\",{\"1\":{\"16\":1}}],[\"14159\",{\"1\":{\"15\":2}}],[\"14\",{\"1\":{\"15\":2}}],[\"1000\",{\"1\":{\"21\":1}}],[\"100\",{\"1\":{\"21\":3,\"24\":1}}],[\"10\",{\"1\":{\"15\":2,\"17\":1,\"21\":3}}],[\"1可以是变量名c\",{\"1\":{\"15\":1}}],[\"18\",{\"1\":{\"7\":1,\"21\":3}}],[\"1\",{\"0\":{\"7\":1},\"1\":{\"3\":1,\"13\":1,\"16\":14,\"17\":3,\"21\":22,\"24\":6}}],[\"做自己感兴趣的事情\",{\"1\":{\"2\":1}}],[\"做自己喜欢的事情\",{\"1\":{\"2\":1}}],[\"angthing\",{\"1\":{\"21\":1}}],[\"a++\",{\"1\":{\"17\":1}}],[\"atoi\",{\"1\":{\"16\":1}}],[\"argument\",{\"1\":{\"16\":1}}],[\"argv\",{\"1\":{\"16\":3}}],[\"argc\",{\"1\":{\"16\":2}}],[\"addtwonum\",{\"1\":{\"16\":13}}],[\"apples\",{\"1\":{\"12\":2}}],[\"auto\",{\"1\":{\"11\":1}}],[\"a\",{\"1\":{\"8\":13,\"15\":2,\"16\":3,\"17\":9,\"18\":3,\"21\":7}}],[\"age要大于等于18\",{\"1\":{\"21\":1}}],[\"age\",{\"1\":{\"7\":4,\"8\":4,\"9\":2,\"10\":6,\"12\":2,\"15\":2,\"21\":14}}],[\"a2\",{\"1\":{\"2\":1}}],[\"a1\",{\"1\":{\"2\":1}}],[\"qq号\",{\"1\":{\"3\":1}}],[\"q2\",{\"1\":{\"2\":1}}],[\"q1\",{\"1\":{\"2\":1}}],[\"偶然间看见别的大佬都有自己的网站\",{\"1\":{\"2\":1}}],[\"正在学习搭建网络代理\",{\"1\":{\"1\":1}}],[\"喜欢做什么\",{\"1\":{\"2\":1}}],[\"喜欢学习做web\",{\"1\":{\"1\":1}}],[\"喜欢看动漫\",{\"1\":{\"1\":1}}],[\"经常使用bilibili\",{\"1\":{\"1\":1}}],[\"动画\",{\"1\":{\"1\":1}}],[\"爱好\",{\"1\":{\"1\":1}}],[\"地方\",{\"1\":{\"1\":1}}],[\"小咕咚\",{\"1\":{\"1\":1}}],[\"名称\",{\"1\":{\"1\":1}}],[\"作者介绍\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}";